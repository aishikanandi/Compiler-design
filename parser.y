%{ 
   /* Definition section */
  #include<stdio.h> 
  int flag=0; 

%}

%start S
%token TOKEN_KEYWORD TOKEN_PSEUDOKEYWORD TOKEN_AWAIT TOKEN_NULL TOKEN_BIN_OPERATOR TOKEN_VARIABLE TOKEN_CONST TOKEN_LET TOKEN_SMCLN TOKEN_EQUAL TOKEN_NOT TOKEN_LC TOKEN_RC TOKEN_WHILE TOKEN_DO TOKEN_FOR TOKEN_IF TOKEN_ELSE TOKEN_LR TOKEN_RR TOKEN_LP TOKEN_RP TOKEN_COMMA TOKEN_COMMENTS TOKEN_MULTI_COMMENTS TOKEN_HASHBANG_COMMENT TOKEN_PRINT TOKEN_SOME_OPERATOR TOKEN_OPERATOR TOKEN_SPACE TOKEN_PRIVATE_IDENTIFIER TOKEN_UNARY_OPERATOR TOKEN_DOT TOKEN_ANDOR
%token TOKEN_INTEGER TOKEN_DECIMAL TOKEN_BINARY TOKEN_OCTAL TOKEN_EXP TOKEN_HEXADECIMAL TOKEN_BIG_INTEGER TOKEN_STRING TOKEN_BOOLEAN TOKEN_IDENTIFIER TOKEN_RE_ASSIGNMENT TOKEN_3DOTS TOKEN_PRE_UNARY TOKEN_PLUS TOKEN_MINUS
%right TOKEN_COLON
%left TOKEN_QUESTION_MARK
%token TOKEN_COMP_OPERATOR
/* Rule Section */
%% 
//Start
S: A END 
A: |E|ASS
END: |TOKEN_SMCLN

//Assignment
ASS: TOKEN_VARIABLE TOKEN_IDENTIFIER TOKEN_EQUAL F| TOKEN_CONST TOKEN_IDENTIFIER TOKEN_EQUAL F|TOKEN_LET TOKEN_IDENTIFIER TOKEN_EQUAL F|TOKENID TOKEN_EQUAL F|TOKEN_LET TOKEN_IDENTIFIER| TOKEN_VARIABLE TOKEN_IDENTIFIER| TOKENID TOKEN_RE_ASSIGNMENT F| F ;
F: TOKEN_PLUS E| TOKEN_MINUS E| E |TOKEN_NOT F| UNSTMT| TOKEN_PRE_UNARY F| G TERNARY_N G | TOKEN_LP F TOKEN_RP;
E:  D| E TOKEN_BIN_OPERATOR E|E TOKEN_PLUS E|E TOKEN_MINUS E| E TOKEN_COMP_OPERATOR E| E TOKEN_ANDOR E | TOKEN_LP E TOKEN_RP;
D: TOKEN_INTEGER|TOKEN_DECIMAL|TOKEN_BINARY|TOKEN_OCTAL|TOKEN_EXP|TOKEN_HEXADECIMAL|TOKEN_BIG_INTEGER|TOKEN_STRING|TOKEN_BOOLEAN| TOKENID| TOKEN_LP D TOKEN_RP;
TOKENID: TOKEN_IDENTIFIER | TOKEN_IDENTIFIER TOKEN_DOT TOKEN_IDENTIFIER| G TERNARY_R TERNARY_RIGHT;

G: TOKEN_LP F TOKEN_RP| F;
TERNARY_RIGHT: TOKEN_LP TOKENID TOKEN_RP | TOKENID;

/*Unary statements*/
UNSTMT: TOKENID TOKEN_UNARY_OPERATOR|TOKEN_UNARY_OPERATOR TOKENID| TOKEN_PRE_UNARY E ;

/*while loop*/
WHILELP: TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP EXP ;


/*do while loop*/
DOWHILELP: TOKEN_DO TOKEN_LC E TOKEN_RC TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP;

/*conditional statement*/
EXP: D TOKEN_COMP_OPERATOR E| D| TOKEN_LC EXP TOKEN_RC;
COMPEXP: EXP TOKEN_BIN_OPERATOR COMPEXP| EXP TOKEN_PLUS COMPEXP| EXP TOKEN_MINUS COMPEXP| TOKEN_NOT COMPEXP |EXP;

/*ternary operator*/
TERNARY_R: TOKEN_QUESTION_MARK TERNARY_RIGHT TOKEN_COLON ;
TERNARY_N: TOKEN_QUESTION_MARK G TOKEN_COLON ;
%% 

void main() 
{ 
  printf("\nEnter code:\n"); 
   yyparse(); 
   if(flag==0) 
   	printf("\nEntered arithmetic expression is Valid\n\n"); 
} 
  
void yyerror() 
{ 
   printf("\nEntered arithmetic expression is Invalid\n\n"); 
   flag=1; 
} 