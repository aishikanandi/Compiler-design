%{ 
   /* Definition section */
  #include<stdio.h> 
  #include "y.tab.h"
  extern FILE *yyin;
  int flag=0; 
 
%}

%start S
%token TOKEN_KEYWORD TOKEN_PSEUDOKEYWORD TOKEN_AWAIT TOKEN_NULL TOKEN_BIN_OPERATOR TOKEN_VARIABLE TOKEN_CONST TOKEN_LET TOKEN_SMCLN TOKEN_EQUAL TOKEN_NOT TOKEN_LC TOKEN_RC TOKEN_WHILE TOKEN_DO TOKEN_FOR TOKEN_IF TOKEN_ELSE TOKEN_LR TOKEN_RR TOKEN_LP TOKEN_RP TOKEN_COMMA TOKEN_COMMENTS TOKEN_MULTI_COMMENTS TOKEN_HASHBANG_COMMENT TOKEN_PRINT TOKEN_SOME_OPERATOR TOKEN_OPERATOR TOKEN_SPACE TOKEN_PRIVATE_IDENTIFIER TOKEN_UNARY_OPERATOR TOKEN_DOT TOKEN_ANDOR 
%token TOKEN_INTEGER TOKEN_DECIMAL TOKEN_BINARY TOKEN_OCTAL TOKEN_EXP TOKEN_HEXADECIMAL TOKEN_BIG_INTEGER TOKEN_STRING TOKEN_BOOLEAN TOKEN_IDENTIFIER TOKEN_RE_ASSIGNMENT TOKEN_3DOTS TOKEN_PRE_UNARY TOKEN_PLUS TOKEN_MINUS
%right TOKEN_COLON
%left TOKEN_QUESTION_MARK
%token TOKEN_COMP_OPERATOR
/* Rule Section */
%% 
//Start
S:  P END
P:  | A TOKEN_SMCLN |  A TOKEN_SMCLN P| A;
A:  | ASS| PRINTSTMT| UNSTMT| DOWHILELP| WHILELP ;
END: |TOKEN_SMCLN

//Assignment and statements
ASS: F| TOKEN_VARIABLE TOKEN_IDENTIFIER TOKEN_EQUAL F| TOKEN_CONST TOKEN_IDENTIFIER TOKEN_EQUAL F|TOKEN_LET TOKEN_IDENTIFIER TOKEN_EQUAL F |TOKENID TOKEN_EQUAL F|TOKEN_LET TOKEN_IDENTIFIER| TOKEN_VARIABLE TOKEN_IDENTIFIER| TOKENID TOKEN_RE_ASSIGNMENT F;
F:  TOKEN_PLUS E| TOKEN_MINUS E |TOKEN_NOT F| UNSTMT| TOKEN_PRE_UNARY F | TOKEN_LP F TOKEN_RP|  E;
E:   E TOKEN_COMP_OPERATOR E| E TOKEN_BIN_OPERATOR E|E TOKEN_PLUS E|E TOKEN_MINUS E| E TOKEN_ANDOR E | TOKEN_LP E TOKEN_RP| D| F_TERNARY_RIGHT;
F_TERNARY_RIGHT: F TOKEN_QUESTION_MARK F TOKEN_COLON F // on right side of equality ternary expression on either side of colons can be variables or constants.
D: TOKEN_INTEGER |TOKEN_DECIMAL|TOKEN_BINARY|TOKEN_OCTAL|TOKEN_EXP|TOKEN_HEXADECIMAL|TOKEN_BIG_INTEGER|TOKEN_STRING|TOKEN_BOOLEAN| TOKENID| TOKEN_LP D TOKEN_RP;
TOKENID: TOKEN_IDENTIFIER | TOKEN_IDENTIFIER TOKEN_DOT TOKEN_IDENTIFIER| F_TERNARY_LEFT| TOKEN_LP TOKENID TOKEN_RP;
F_TERNARY_LEFT: F TOKEN_QUESTION_MARK TOKENID TOKEN_COLON TOKENID;  // on left side of equality ternary expression on either side of colons cannot be variables or constants.

//print statement
PRINTSTMT: TOKEN_PRINT TOKEN_LP Z TOKEN_RP;
Z: E TOKEN_COMMA Z| E;

//Comments
COMMENTS: TOKEN_COMMENTS TOKEN_MULTI_COMMENTS 

/*Unary statements*/
UNSTMT: TOKENID TOKEN_UNARY_OPERATOR|TOKEN_UNARY_OPERATOR TOKENID| TOKEN_PRE_UNARY E ;

/*while loop*/
WHILELP: TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP TOKEN_LC P TOKEN_RC| TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP F TOKEN_SMCLN;


/*do while loop*/
DOWHILELP: TOKEN_DO TOKEN_LC P TOKEN_RC TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP TOKEN_SMCLN| TOKEN_DO F TOKEN_SMCLN TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP TOKEN_SMCLN;

/*conditional statement*/
COMPEXP: F TOKEN_COMP_OPERATOR COMPEXP| F| TOKEN_LC COMPEXP TOKEN_RC;
%% 


 
void main() 
{ 
  printf("\nEnter code:\n"); 
   yyparse(); 
   if(flag==0) 
   	printf("\nEntered arithmetic expression is Valid\n\n"); 
}
 
void yyerror() 
{ 
   printf("\nEntered arithmetic expression is Invalid\n\n"); 
   flag=1; 
}

// ternary