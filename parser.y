%{ 
   /* Definition section */
  #include<stdio.h> 
  #include "y.tab.h"
  extern FILE *yyin;
  int flag=0; 
 
%}

%start S
%token TOKEN_KEYWORD TOKEN_PSEUDOKEYWORD TOKEN_AWAIT TOKEN_NULL TOKEN_BIN_OPERATOR TOKEN_VARIABLE TOKEN_CONST TOKEN_LET TOKEN_SMCLN TOKEN_EQUAL TOKEN_NOT TOKEN_LC TOKEN_RC TOKEN_WHILE TOKEN_DO TOKEN_FOR TOKEN_IF TOKEN_ELSE TOKEN_LR TOKEN_RR TOKEN_LP TOKEN_RP TOKEN_COMMA TOKEN_COMMENTS TOKEN_MULTI_COMMENTS TOKEN_HASHBANG_COMMENT TOKEN_PRINT TOKEN_SOME_OPERATOR TOKEN_OPERATOR TOKEN_SPACE TOKEN_PRIVATE_IDENTIFIER TOKEN_UNARY_OPERATOR TOKEN_DOT TOKEN_ANDOR TOKEN_FUNCTION TOKEN_RETURN TOKEN_IN TOKEN_NEW TOKEN_ARROW
%token TOKEN_INTEGER TOKEN_DECIMAL TOKEN_BINARY TOKEN_OCTAL TOKEN_EXP TOKEN_HEXADECIMAL TOKEN_BIG_INTEGER TOKEN_STRING TOKEN_BOOLEAN TOKEN_IDENTIFIER TOKEN_RE_ASSIGNMENT TOKEN_3DOTS TOKEN_NEGATION TOKEN_PLUS TOKEN_MINUS
%right TOKEN_COLON
%left TOKEN_QUESTION_MARK
%token TOKEN_COMP_OPERATOR

/* Rule Section */
%% 
//Start
S:  P END_SMCLN
P:  | A |  A TOKEN_SMCLN P| A COMMENTS;
A:  | ASS| PRINTSTMT| UNSTMT| DOWHILELP| WHILELP| COMMENTS | FUND | FUNC | FOR | TOKEN_LC P TOKEN_RC| ARRAY| METHOD| COMPEXP| IF_ELSE;
END_SMCLN: |TOKEN_SMCLN
END_COMMA: |TOKEN_COMMA

/* if else */
IF_ELSE: TOKEN_IF TOKEN_LP COMPEXP TOKEN_RP IFSTMT ELSE_IF_BLOCK ELSE_BLOCK;
IFSTMT: TOKEN_SMCLN| F TOKEN_SMCLN | TOKEN_LC P TOKEN_RC ;
ELSE_IF_BLOCK: | TOKEN_ELSE TOKEN_IF TOKEN_LP COMPEXP TOKEN_RP IFSTMT ;
ELSE_BLOCK: | TOKEN_ELSE IFSTMT;

//Assignment 
ASS: F|TOKEN_VARIABLE TOKEN_IDENTIFIER TOKEN_EQUAL X ASSIGNMENT_COMMA2| TOKEN_LET TOKEN_IDENTIFIER TOKEN_EQUAL X ASSIGNMENT_COMMA2| TOKEN_CONST TOKEN_IDENTIFIER TOKEN_EQUAL X ASSIGNMENT_COMMA2 | UNINITIALIZED | WITHOUT_VAR_LET_CONST| 
X:TOKEN_LP PARAM3 TOKEN_RP TOKEN_ARROW FUNCTION_BLOCK|  MULTI_EQUAL|  METHOD| FUNC| TOKEN_NEW FUNC; 
UNINITIALIZED: TOKEN_LET TOKEN_IDENTIFIER ASSIGNMENT_COMMA2| TOKEN_VARIABLE TOKEN_IDENTIFIER ASSIGNMENT_COMMA2;

WITHOUT_VAR_LET_CONST: TOKENID TOKEN_EQUAL MULTI_EQUAL2 ASSIGNMENT_COMMA1|TOKENID TOKEN_RE_ASSIGNMENT MULTI_EQUAL2 ASSIGNMENT_COMMA1| TOKENID ASSIGNMENT_COMMA1; // a=1,b,A?B:C expressions of this form. might not be stict identifiers.
ASSIGNMENT_COMMA1: | TOKEN_COMMA WITHOUT_VAR_LET_CONST; 

WITH_VAR_LET_CONST: TOKEN_IDENTIFIER TOKEN_EQUAL MULTI_EQUAL ASSIGNMENT_COMMA2|TOKEN_IDENTIFIER TOKEN_RE_ASSIGNMENT MULTI_EQUAL ASSIGNMENT_COMMA2| TOKEN_IDENTIFIER ASSIGNMENT_COMMA2; //strictly identifiers in assignment statements with comma
ASSIGNMENT_COMMA2: | TOKEN_COMMA WITH_VAR_LET_CONST 

MULTI_EQUAL: TOKEN_IDENTIFIER TOKEN_EQUAL MULTI_EQUAL|METHOD | TOKEN_IDENTIFIER| FUNC| TOKEN_NEW FUNC|  TOKEN_IDENTIFIER TOKEN_DOT TOKEN_IDENTIFIER| F;
MULTI_EQUAL2: MULTI_EQUAL | TOKENID TOKEN_EQUAL MULTI_EQUAL2

//Expressions
F:  TOKEN_NOT F| UNSTMT| TOKEN_NEGATION F | TOKEN_LP F EXPRESSION_COMMA TOKEN_RP| TOKEN_LP WITHOUT_VAR_LET_CONST EXPRESSION_COMMA TOKEN_RP |  FUNC| F TOKEN_BIN_OPERATOR F| F TOKEN_PLUS F|F TOKEN_MINUS F| F TOKEN_ANDOR F | D| F_TERNARY_RIGHT;
//E:   E TOKEN_COMP_OPERATOR E| E TOKEN_PLUS E|E TOKEN_MINUS E|E TOKEN_BIN_OPERATOR E| E TOKEN_ANDOR E | TOKEN_LP E EXPRESSION_COMMA TOKEN_RP| D| F_TERNARY_RIGHT| FUNC| TOKEN_NEW FUNC;
F_TERNARY_RIGHT: F TOKEN_QUESTION_MARK F TOKEN_COLON F // on right side of equality ternary expression on either side of colons can be variables or constants.
D: TOKEN_INTEGER |TOKEN_DECIMAL|TOKEN_BINARY|TOKEN_OCTAL|TOKEN_EXP|TOKEN_HEXADECIMAL|TOKEN_BIG_INTEGER|TOKEN_STRING|TOKEN_BOOLEAN| TOKENID| TOKEN_LP D EXPRESSION_COMMA TOKEN_RP | ARRAY;
TOKENID: TOKEN_IDENTIFIER | TOKEN_IDENTIFIER TOKEN_DOT TOKEN_IDENTIFIER| F_TERNARY_LEFT| TOKEN_LP TOKENID EXPRESSION_COMMA TOKEN_RP| ARRAY_ELEMENT| OBJECT;
F_TERNARY_LEFT: F TOKEN_QUESTION_MARK TOKENID TOKEN_COLON TOKENID;  // on left side of equality ternary expression on either side of colons cannot be variables or constants.

EXPRESSION_COMMA: | TOKEN_COMMA F EXPRESSION_COMMA| TOKEN_COMMA WITHOUT_VAR_LET_CONST EXPRESSION_COMMA; // (x,y,z, and so on): takes the last one in this pattern after comma

//Function Definition
FUND: TOKEN_FUNCTION FUNCTION_DEFINITION;
FUNCTION_DEFINITION: TOKEN_IDENTIFIER TOKEN_LP PARAM TOKEN_RP FUNCTION_BLOCK;
FUNCTION_BLOCK: TOKEN_LC P RETURN TOKEN_RC;
PARAM: | TOKEN_IDENTIFIER PARAM2 ;
PARAM2: | TOKEN_COMMA TOKEN_IDENTIFIER PARAM2;
RETURN: |  TOKEN_RETURN F |   TOKEN_RETURN F TOKEN_SMCLN |  TOKEN_RETURN|  TOKEN_RETURN TOKEN_SMCLN;

//Function call
FUNC: TOKEN_IDENTIFIER TOKEN_LP PARAM3 TOKEN_RP | TOKEN_LP PARAM3 TOKEN_RP TOKEN_ARROW FUNCTION_BLOCK; 
PARAM3: | D PARAM4 ;
PARAM4: | TOKEN_COMMA D PARAM4;

//Method
METHOD: TOKEN_LC FUNCTION_DEFINITION END_COMMA TOKEN_RC    // Method means: const a={ m(x,y){return x*y}}  semicolon may or may not be there;

//Array 
ARRAY_ELEMENT: TOKEN_IDENTIFIER TOKEN_LR F TOKEN_RR 
ARRAY:  TOKEN_LR ARRAY_IN TOKEN_RR 
ARRAY_IN: | F | F TOKEN_COMMA ARRAY_IN; 

//Object
OBJECT: TOKEN_LC OBJECT_IN TOKEN_RC;
OBJECT_IN: | TOKEN_IDENTIFIER TOKEN_COLON F PROPERTIES_REPEAT;
PROPERTIES_REPEAT: END_COMMA | TOKEN_COMMA OBJECT_IN;

//print statement
PRINTSTMT: TOKEN_PRINT TOKEN_LP Z TOKEN_RP;
Z: F TOKEN_COMMA Z| F;

//Comments
COMMENTS: TOKEN_COMMENTS | TOKEN_MULTI_COMMENTS 

/*Unary statements*/
UNSTMT: TOKENID TOKEN_UNARY_OPERATOR|TOKEN_UNARY_OPERATOR TOKENID ;

/*for loop*/
FOR: TOKEN_FOR TOKEN_LP FOR_IN TOKEN_SMCLN FOR_COMPEXP TOKEN_SMCLN FOR_STMT TOKEN_RP TOKEN_LC P TOKEN_RC | TOKEN_FOR TOKEN_LP FOR_IN TOKEN_SMCLN FOR_COMPEXP TOKEN_SMCLN FOR_STMT TOKEN_RP F TOKEN_SMCLN| TOKEN_FOR TOKEN_LP FOR_IN_ID TOKEN_IN FOR_IN_ID TOKEN_RP TOKEN_LC P TOKEN_RC| TOKEN_FOR TOKEN_LP FOR_IN_ID TOKEN_IN FOR_IN_ID TOKEN_RP F TOKEN_SMCLN;
FOR_IN_ID: TOKEN_IDENTIFIER| TOKEN_IDENTIFIER TOKEN_DOT TOKEN_IDENTIFIER| UNINITIALIZED| TOKEN_CONST TOKEN_IDENTIFIER;  // const a in x inside a for loop
FOR_COMPEXP: | COMPEXP | COMPEXP FOR_COMPEXP2;
FOR_COMPEXP2: | TOKEN_COMMA COMPEXP FOR_COMPEXP2;
FOR_IN: | ASS| ASS FOR_IN2;
FOR_IN2: | TOKEN_COMMA ASS FOR_IN2;
FOR_STMT: | WITHOUT_VAR_LET_CONST | F| WITHOUT_VAR_LET_CONST FOR_STMT2| F FOR_STMT2;
FOR_STMT2: | TOKEN_COMMA F FOR_STMT2;| TOKEN_COMMA WITHOUT_VAR_LET_CONST FOR_STMT2;


/*while loop*/
WHILELP: TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP TOKEN_LC P TOKEN_RC| TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP F TOKEN_SMCLN;


/*do while loop*/
DOWHILELP: TOKEN_DO TOKEN_LC P TOKEN_RC TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP TOKEN_SMCLN| TOKEN_DO F TOKEN_SMCLN TOKEN_WHILE TOKEN_LP COMPEXP TOKEN_RP TOKEN_SMCLN;

/*conditional statement*/
COMPEXP: F TOKEN_COMP_OPERATOR COMPEXP| F| TOKEN_LC COMPEXP TOKEN_RC;
%% 


void main() 
{ 
  printf("\nEnter code:\n"); 
   yyparse(); 
   if(flag==0) 
   	printf("\nEntered arithmetic expression is Valid\n\n"); 
}
 
void yyerror() 
{ 
   printf("\nEntered arithmetic expression is Invalid\n\n"); 
   flag=1; 
}

// function call with arrow;